# Forensic Windows - Mémoire Vive
La mémoire vive contient un grand nombre d'informations indispensables lors d'une investigation numérique. En l'analysant, il sera ainsi possible d'identifier les processus en cours d'exécution ou terminés, des créations/suppressions de fichiers, et même des connexions réseaux. 

# 1. Prélèvement de la mémoire vive 


Il existe de nombreux moyens d'accéder au contenu de la mémoire vive, \\
tout d'abord de manière passive en analysant des fichiers générés par le <système d'exploitation :

* **%SystemDrive%\hiberfil.sys** : Ce fichier nommé fichier d'hibernation va stocker le contenu de la mémoire vive lorsque le système d'exploitation activera le mode veille prolongée. Le dump ne sera pas exploitable directement, car son contenu est compressé. Volatility offre toutefois la possibilité de le convertir.

```
root@kali# volatility -f ../hiberfil.sys imagecopy -O hiberfil.raw
```


* **%SystemDrive%\pagefile.sys** : 
* **%SystemDrive%\swapfile.sys** : Uniquement présent sur les systèmes d'exploitation depuis les versions Win8/Win2012
* **%WINDIR\MEMORY.DMP** : correspond aux crash dump du système d'exploitation windows. Il est nécessaire comme pour le fichier ```hiberfile.sys``` d'utiliser le plugin ```imagecopy``` de Volatility afin de rendre exploitable ce type de dump mémoire.


Ensuite, l'accès aux données de la mémoire vive peut s'effectuer via des outils de prélèvements.
Voici quelques outils disponibles gratuitement sur le web qui vous permettront d'effectuer une extraction de la mémoire vive du système visé.
Pour chacun des outils ci-dessous, gardez bien à l'esprit que le temps de prélèvement, et la taille du dump dépendront de la mémoire vive installée. Il est d'ailleurs recommandé lors d'une investigation d'exécuter ce type d'outil à partir d'un périphérique amovible afin de ne pas compromettre la récupération de données sur les périphériques de stockage.

## DumpIt
\\
Source : http://www.comae.io

```
dumpit.exe /Q /O memory_dump.raw
```

## FTK imager
\\
Source : https://accessdata.com/product-download

## Magnet Forensics
Magnet fournit un outil gratuit permettant de prélever la mémoire vive de système. Il est compatible sur les systèmes suivants : Windows XP, Vista, 7, 8, 10, 2003, 2008, 2012 (32 and 64 bit support)
\\
Source : https://www.magnetforensics.com/resources/magnet-ram-capture/

## Winpmem
Winpmem est un outil exécuté en ligne de commande.\\
Il est recommandé lors d'une investigation d'exécuter ce type d'outil à partir d'un périphérique amovible afin de ne pas compromettre la récupération de données sur les périphériques de stockage.

```
winpmem.exe windows_memory.dmp
```

# 2. Extraction de la RAM provenant de machines virtuelles

Les machines virtuelles fonctionnent différemment des machines physiques. Les ressources matérielles sont virtualisées et leurs données sont ainsi stockées dans des fichiers sur le périphérique de stockage de l'hyperviseur.

On peut ainsi obtenir très facilement les dumps de mémoire et ce pour la plupart des technologies de virtualisation.

## VMware (Fusion/Workstation/Server/Player)

VMware utilise les fichiers : 

* **VMEM**, qui correspond à une image brute de la RAM
* **VMSS** et **VMSN** pour stocker une image de la mémoire vive.

Pour l'analyse d'un Windows2016, il est nécessaire d'avoir les deux fichiers ```.vmem``` et ```.vmss``` au sein du même répertoire pour pouvoir effectuer l'analyse avec volatility sur le fichier ```.vmem```.


## Microsoft Hyper-v
Sous Microsoft Hyper-v, l'accès à la mémoire s'effectue au sein des fichiers ```.bin``` correspondant à l'image de la mémoire, et le fichier ```.vsv```.

## Parallels
Parallels stocke quant à lui le contenu de la RAM dans le fichier ```.mem``` des machines virtuelles.

## VirtualBox
VirtualBox n'a pas le même fonctionnement que les autres technologies.
Une partie de la mémoire est présente dans le fichier ```.sav``` des machines virtuelles. S'il est nécessaire d'obtenir l'intégralité du contenu, nous devrons démarrer la machine virtuelle en mode débogage, ou utiliser un des outils listés ci-dessus de prélèvement.


# 3. Analyse de la mémoire vive

## Volatility

Volatility est un outil opensource dédié à l'analyse de dump mémoire, multi OS, Microsoft Windows / Linux / macOS.

Le code source est disponible : https://github.com/volatilityfoundation/volatility \\
Un wiki reprenant les commandes est également disponible, ici : https://github.com/volatilityfoundation/volatility/wiki/Command-Reference

Une fois déployé, l'outil s'utilise de la manière suivante : 

```
root@kali# volatility -f {image} --profile={profile} {plugins}
```

Pour faciliter l'utilisation de l'outil, il est possible de déclarer des variables d'environnements correspondant à l'emplacement de l'image mémoire ```VOLATILITY_LOCATION=file://.....```, et au profile ```VOLATILITY_PROFILE=...```. La variable d'environnement ```VOLATILITY_KDBG=...``` peut également être déclarée.

```
root@kali# export VOLATILITY_LOCATION=file://mydump.img
root@kali# export VOLATILITY_PROFILE=Win2016x64_14393
root@kali# volatility {plugins}
```

Une fois l'analyse effectuée, la variable d'environnement pourra être supprimée en utilisant la commande ```unset```.

```
root@kali# unset VOLATILITY_LOCATION
root@kali# unset VOLATILITY_PROFILE
```


### imagecopy - convertion des fichiers d'hibernation

Lorsque le système d'exploitation se met en veille prolongée, il va vider le contenu de sa mémoire vive dans un fichier **hiberfil.sys**.
Pour que **volatility** puisse analyser ce fichier, le fichier **hiberfil** devra être transformé en utilisant le plugin **imagecopy**.

```
root@kali# volatility -f ../hiberfil.sys imagecopy -O hiberfil.raw
```





### kdbgscan - identification du profile

Chaque système d'exploitation structure différemment la mémoire utilisée
Pour pouvoir analyser un dump de mémoire vive, il est impératif de déterminer le profile correspondant à la version de son système d'exploitation. Le plugin **kdbgscan** est une version plus élaborée du plugin **imageinfo**. Il va parcourir le dump mémoire en testant certains profiles. Les résultats obtenus permettront de déterminer le profile adapté.

```
root@kali# volatility -f ../JbossServer_memory.vmem kdbgscan

**************************************************
Instantiating KDBG using: Unnamed AS Win10x64_16299 (6.4.16299 64bit)
Offset (V)                    : 0xf80378f0d500
Offset (P)                    : 0x13c50d500
KdCopyDataBlock (V)           : 0xf80378dede00
Block encoded                 : Yes
Wait never                    : 0xaab5d10f40116bba
Wait always                   : 0x8b5d94baa88a2
KDBG owner tag check          : True
Profile suggestion (KDBGHeader): Win10x64_16299
Version64                     : 0xf80378f0fcf8 (Major: 15, Minor: 14393)
Service Pack (CmNtCSDVersion) : 0
Build string (NtBuildLab)     : 14393.693.amd64fre.rs1_release.1
PsActiveProcessHead           : 0xfffff80378f1c3d0 (87 processes)
PsLoadedModuleList            : 0xfffff80378f22060 (164 modules)
KernelBase                    : 0xfffff80378c1d000 (Matches MZ: True)
Major (OptionalHeader)        : 10
Minor (OptionalHeader)        : 0
KPCR                          : 0xfffff80378f5f000 (CPU 0)
KPCR                          : 0xffff8380e3158000 (CPU 1)

**************************************************
Instantiating KDBG using: Unnamed AS Win2016x64_14393 (6.4.14393 64bit)
Offset (V)                    : 0xf80378f0d500
Offset (P)                    : 0x13c50d500
KdCopyDataBlock (V)           : 0xf80378dede00
Block encoded                 : Yes
Wait never                    : 0xaab5d10f40116bba
Wait always                   : 0x8b5d94baa88a2
KDBG owner tag check          : True
Profile suggestion (KDBGHeader): Win2016x64_14393
Version64                     : 0xf80378f0fcf8 (Major: 15, Minor: 14393)
Service Pack (CmNtCSDVersion) : 0
Build string (NtBuildLab)     : 14393.693.amd64fre.rs1_release.1
PsActiveProcessHead           : 0xfffff80378f1c3d0 (87 processes)
PsLoadedModuleList            : 0xfffff80378f22060 (164 modules)
KernelBase                    : 0xfffff80378c1d000 (Matches MZ: True)
Major (OptionalHeader)        : 10
Minor (OptionalHeader)        : 0
KPCR                          : 0xfffff80378f5f000 (CPU 0)
KPCR                          : 0xffff8380e3158000 (CPU 1)

**************************************************
```

Pour déterminer le profile adéquat, il est important de comparer la version de compilation "Build string" avec le nom du profile.
Dans notre cas la version de compilation est la "14393.693.amd64fre.rs1_release.1". Elle correspond à la seconde suggestion de profile "Win2016x64_14393".
Il y a aussi deux autres critères tout aussi important, le nombre de processus identifiés "PsActiveProcessHead", et "PsLoadedModuleList". Ils doivent avoir un nombre de processus supérieur à 0.

Le temps d'exécution de commande via volatility peut être conséquent en fonction de la mémoire vive disponible sur le serveur (8/16/32G). Le plugin "imageinfo" donne un certain nombre d'informations dont "DTB", et "KDBG" qui peuvent être passées en paramètre. Ces offset permettent de réduire significativement le temps d'exécution des commandes volatility.

```
root@kali# volatility -f ../JbossServer_memory.vmem  --profile=Win2016x64_14393  imageinfo 
Volatility Foundation Volatility Framework 2.6
INFO    : volatility.debug    : Determining profile based on KDBG search...
          Suggested Profile(s) : Win2016x64_14393
                     AS Layer1 : SkipDuplicatesAMD64PagedMemory (Kernel AS)
                     AS Layer2 : VMWareMetaAddressSpace (Unnamed AS)
                     AS Layer3 : FileAddressSpace (/media/root/053CD60D397582C6/JbossServer_memory.vmem)
                      PAE type : No PAE
                           DTB : 0x1ab000L
                          KDBG : 0xf80378f0d500L
          Number of Processors : 2
     Image Type (Service Pack) : 0
                KPCR for CPU 0 : 0xfffff80378f5f000L
                KPCR for CPU 1 : 0xffff8380e3158000L
             KUSER_SHARED_DATA : 0xfffff78000000000L
           Image date and time : 2020-01-16 14:01:48 UTC+0000
     Image local date and time : 2020-01-16 06:01:48 -0800
```

### 1. Identification de processus suspects

Comment détecter un processus non légitimes ? \\
Voici quelques actions à mener pour mettre en avant toutes incohérences : 

* **Analyse du nom du processus :**
 * S'agit-il d'un processus légitime ?
 * A t-il un nom qui se rapproche d'un processus connu du système ?
* **Analyse du chemin ou est stocké le binaire :**
 * Est-il stocké au sein d'un répertoire accessible en écriture par tout le monde (ex: répertoire utilisateur / répertoire temporaire)
* **Analyse du processus parent :**
 * Est-il le parent attendu pour ce type de processus ?
* **Analyse des différents arguments passés au processus**
* **Analyse de l'heure à laquelle le processus a été exécuté :**
 * Identification de modifications apportées au système
  * Actions sur le système de fichiers (création/suppression)
  * Mise en place de moyens de persistence (création de services / taches planifiées)
* **Analyse des droits associés à l'utilisateur ayant exécuté le binaire**



Pour nous aider dans cette investigation, le SANS a publié quelques posters au format PDF disponibles à partir du répertoire **Documentation** présent sur le bureau de votre session utilisateur secubian.
Voici quelques processus systèmes légitimes sur un système d'exploitation Microsoft Windows : 

* **csrss.exe**
 * Chemin : ```%systemroot%\system32\csrss.exe```
 * Processus parent : smss.exe

* **explorer.exe**
 * Chemin : ```%systemroot%\explorer.exe```
 * Processus parent : userinit.exe
 * Nombre d’occurrence : 1 instance par compte utilisateur connecté
 * Utilisateur exécutant le processus : le compte utilisateur connecté

* **lsaiso.exe**
 * Chemin : ```%systemroot%\system32\lsaiso.exe```
 * Processus parent : wininit.exe
 * Nombre d’occurrence : <= 1
 * Utilisateur exécutant le processus : local system

* **lsass.exe**
 * Chemin : ```%systemroot%\system32\lsass.exe```
 * Processus parent : wininit.exe
 * Nombre d’occurrence : 1
 * Utilisateur exécutant le processus : local system

* **runtimebroker.exe**
 * Chemin : ```%systemroot%\system32\runtimebroker.exe```
 * Processus parent : svchost.exe

* **services.exe**
 * Chemin : ```%systemroot%\system32\services.exe```
 * Processus parent : wininit.exe
 * Nombre d’occurrence : 1

* **smss.exe**
 * Chemin : ```%systemroot%\system32\smss.exe```
 * Processus parent : system

* **svchost.exe**
 * Chemin : ```%systemroot%\system32\svchost.exe```
 * Processus parent : services.exe

* **system**
 * Chemin : 
 * Processus parent : aucun
 * Nombre d’occurrence : 1

* **taskhostw.exe**
 * Chemin : ```%systemroot%\system32\taskhostw.exe```
 * Processus parent : svchost.exe

* **wininit.exe**
 * Chemin : ```%systemroot%\system32\wininit.exe```
 * Processus parent : smss.exe
 * Nombre d’occurrence : 1

* **winlogon.exe**
 * Chemin : ```%systemroot%\system32\winlogon.exe```
 * Processus parent : smss.exe
 * Utilisateur exécutant le processus : local system


#### 1.1 Analyse antivirus des processus

Avant de commencer une analyse approfondie du dump mémoire, il peut être très efficace d'effectuer une analyse antivirus des processus en cours d'exécution lors de l'acquisition de la mémoire. L'antivirus Clamav n'est pas parfait peut aider l'équipe d'analystes.
Le plugin "procdump" va nous permettre d'extraire les processus en cours d'exécution. Les arguments "-u" et "--memory" permettront d'obtenir plus d'informations relatives aux processus. 

```
root@kali# volatility -f ./JbossServer_memory.vmem --profile=Win2016x64_14393 --kdbg=0xf80378f0d500 --dtb=0x1ab000  procdump -u --memory -D ./procdump

root@kali# clamscan --infected  --suppress-ok-results ./procdump/
..
..
----------- SCAN SUMMARY -----------
Known viruses: 6768074
Engine version: 0.102.2
Scanned directories: 1
Scanned files: 79
Infected files: 0
Data scanned: 45.97 MB
Data read: 44.19 MB (ratio 1.04:1)
Time: 48.212 sec (0 m 48 s)
```


#### 1.2 Lister les processus

Une des premières action à mener lors d'une investigation numérique est de lister les processus afin d'identifier d'éventuels processus suspects.

Plusieurs plugins sont disponibles (pslist, pstree, etc). Ils vont ainsi parcourir la liste chainée les structures **EPROCESS** et les afficher à l'écran. \\
\\ \\
La structure ```_EPROCESS``` contient pas loin de 100 attributs, dont la plupart sont des pointeurs vers d’autres structures. \\
Voici les principaux :

* CreateTime : Timestamp de la création du processus
* ExitTime : Timestamp de la fin du processus
* PCB : Process Control Block (utilisé pour récupérer la priorité du processus)
* PEB : Pointeur vers le PEB « Process Environment Block »
* ImageFilename : Nom du fichier exécuté comme processus
* InheritedFromUniqueProcessId : Parent PID
* Session :  Session exécutant le processus « Logon Session »
* ThreadListHead : Liste des threads actifs (_ETHREAD) 
* UniqueProcessId : PID du processus
* VadRoot : Pointeur vers la structure VAD « Virtual Address Descriptors » du processus

{{ :forensic:eprocess_1.png?nolink |}}


\\ \\
Chaque processus a son environnement propre nommé **Process Environment Block (PEB)**. Y sont stockées les données telles que le chemin ou se trouve le binaire, les éventuels arguments ainsi qu'un pointeur vers la structure ```_PEB_LDR_DATA``` qui contient les DLLs nécessaires à son exécution. 

{{ :forensic:eprocess_2.png?nolink |}}



##### 1.2.1 Pslist

Ce plugin comme évoqué ci-dessus va parcourir la liste liant les structures **EPROCESS** des processus. \\
Il affichera entre autre en résultat :

* le nom du processus (Name)
* le processus ID (PID)
* le processus ID de son processus parent (PPID)
* le nombre de threads (Thds)
* le nombre de Handle (Hnds)
* l'heure de début de son exécution (Start)

```
root@kali# volatility -f ../JbossServer_memory.vmem  --profile=Win2016x64_14393 --kdbg=0xf80378f0d500 --dtb=0x1ab000 pslist

Offset(V)          Name                    PID   PPID   Thds     Hnds   Sess  Wow64 Start                          Exit                          
------------------ -------------------- ------ ------ ------ -------- ------ ------ ------------------------------ ------------------------------
0xffff9a0fd32ac040 System                    4      0    107        0 ------      0 2020-01-16 13:22:02 UTC+0000                                 
0xffff9a0fd42ac040 smss.exe                364      4      2        0 ------      0 2020-01-16 13:22:02 UTC+0000                                 
0xffff9a0fd43bd080 csrss.exe               472    460     11        0      0      0 2020-01-16 13:22:03 UTC+0000                                 
0xffff9a0fd4dfc080 smss.exe                572    364      0 --------      1      0 2020-01-16 13:22:03 UTC+0000   2020-01-16 13:22:03 UTC+0000  
0xffff9a0fd4e63080 wininit.exe             580    460      1        0      0      0 2020-01-16 13:22:03 UTC+0000                                 
```


Il est possible de n'afficher que les données d'un processus en particulier en utilisant le paramètre '-p' suivi du PID.

```
root@kali# volatility -f ../JbossServer_memory.vmem  --profile=Win2016x64_14393 --kdbg=0xf80378f0d500 --dtb=0x1ab000 pslist -p 364
```


##### 1.2.2 Pstree

Pstree fonctionne comme le plugin "pslist". Il va parcourir la double liste chaînée EPROCESS dans le but d'afficher les processus en cours d'exécution en arbre. Nous serons ainsi capable d'identifier plus rapidement les processus parents et enfants d'un processus cible.

```
root@kali# volatility -f ../JbossServer_memory.vmem  --profile=Win2016x64_14393 --kdbg=0xf80378f0d500 --dtb=0x1ab000 pstree

....... 0xffff9a0fd5df2080:java.exe                  4168    996     72      0 2020-01-16 13:22:35 UTC+0000
........ 0xffff9a0fd5410080:cmd.exe                  5672   4168      1      0 2020-01-16 13:25:03 UTC+0000
......... 0xffff9a0fd4cf3080:conhost.exe             5680   5672      1      0 2020-01-16 13:25:03 UTC+0000
......... 0xffff9a0fd5c81080:rundll32.exe            5704   5672      1      0 2020-01-16 13:25:03 UTC+0000
.......... 0xffff9a0fd5218080:rundll32.exe           5716   5704      2      0 2020-01-16 13:25:03 UTC+0000
........ 0xffff9a0fd53f1080:cmd.exe                  5812   4168      1      0 2020-01-16 13:25:09 UTC+0000
......... 0xffff9a0fd6162080:conhost.exe             5820   5812      1      0 2020-01-16 13:25:09 UTC+0000
......... 0xffff9a0fd4ae7080:rundll32.exe            5844   5812      1      0 2020-01-16 13:25:09 UTC+0000
.......... 0xffff9a0fd6090080:rundll32.exe           5856   5844      2      0 2020-01-16 13:25:09 UTC+0000
```

##### 1.2.3 Psscan

Le plugin psscan utilise un procédé différent pour lister les processus. 
Il va parcourir la mémoire à la recherche de structure **EPROCESS**. Cette méthode permettra notamment d'identifier des processus ayant été exécuté et désormais terminé.

Il affichera entre autre en résultat :

* le nom du processus (Name)
* le processus ID (PID)
* le processus ID de son processus parent (PPID)
* l'heure de début de son exécution (Time created)
* l'heure de fin d'exécution (Time exited)

\\
**La différence entre les résultats du plugins pslist et psscan permettra d'identifier potentiellement des processus tentant de se cacher et permettra d'orienter le reste de notre analyse.**


```
root@kali# volatility -f ../JbossServer_memory.vmem  --profile=Win2016x64_14393 --kdbg=0xf80378f0d500 --dtb=0x1ab000 psscan

Offset(P)          Name                PID   PPID PDB                Time created                   Time exited                   
------------------ ---------------- ------ ------ ------------------ ------------------------------ ------------------------------
0x00009a0fd32ac040 System                4      0 0x00000000001ab000 2020-01-16 13:22:02 UTC+0000                                 
0x00009a0fd351b440 svchost.exe        2272    712 0x0000000121cf0000 2020-01-16 13:22:13 UTC+0000                                 
0x00009a0fd46e4080 conhost.exe        3552   5760 0x00000000b8b61000 2020-01-16 14:01:47 UTC+0000   2020-01-16 14:01:48 UTC+0000  
0x00009a0fd48bc080 cmd.exe            5492   4168 0x000000003b807000 2020-01-16 13:24:57 UTC+0000                                 
0x00009a0fd491f080 svchost.exe        2024    712 0x0000000112dc5000 2020-01-16 13:22:05 UTC+0000                                 
0x00009a0fd49de800 svchost.exe         348    712 0x0000000108bfc000 2020-01-16 13:22:04 UTC+0000                                 
0x00009a0fd4a7f800 WmiPrvSE.exe       2472    808 0x0000000117bc6000 2020-01-16 13:22:06 UTC+0000                                 
```

Comme le plugin pslist, il est possible de n'afficher que les données d'un processus en particulier en utilisant le paramètre '-p' suivi du PID.


#### 1.3 Analyse automatique des processus


##### 1.3.1 Malfind - Injection de code

```
root@kali# volatility -f ../JbossServer_memory.vmem  --profile=Win2016x64_14393 --kdbg=0xf80378f0d500 --dtb=0x1ab000 malfind -p 5716
..
Process: rundll32.exe Pid: 5716 Address: 0x850000
Vad Tag: VadS Protection: PAGE_EXECUTE_READWRITE
Flags: PrivateMemory: 1, Protection: 6

0x00850000  4d 5a e8 00 00 00 00 5b 52 45 55 89 e5 81 c3 64   MZ.....[REU....d
0x00850010  13 00 00 ff d3 81 c3 95 a8 02 00 89 3b 53 6a 04   ............;Sj.
0x00850020  50 ff d0 00 00 00 00 00 00 00 00 00 00 00 00 00   P...............
0x00850030  00 00 00 00 00 00 00 00 00 00 00 00 f8 00 00 00   ................

0x00850000 4d               DEC EBP
0x00850001 5a               POP EDX
0x00850002 e800000000       CALL 0x850007
0x00850007 5b               POP EBX
```

Le plugin malfind a identifié un certain nombre d'anomalie au sein du processus. Nous avons donc décidé d'extraire ces sections de mémoires afin de les analyser plus en détail.

```
root@kali# volatility -f ../JbossServer_memory.vmem  --profile=Win2016x64_14393 --kdbg=0xf80378f0d500 --dtb=0x1ab000 malfind -p 5716 -D ./malfind_dump/

root@kali# ll malfind_dump/
-rwxrwxrwx 1 root root 401407 Feb  1 04:56  process.0xffff9a0fd5218080.0x4670000.dmp
-rwxrwxrwx 1 root root   4095 Feb  1 04:56  process.0xffff9a0fd5218080.0x680000.dmp
-rwxrwxrwx 1 root root 184319 Feb  1 04:56  process.0xffff9a0fd5218080.0x850000.dmp
-rwxrwxrwx 1 root root 204799 Feb  1 04:56  process.0xffff9a0fd5218080.0x880000.dmp
-rwxrwxrwx 1 root root 135167 Feb  1 04:56  process.0xffff9a0fd5218080.0x9c0000.dmp
```

Grâce à la commande "file", il a été facile d'identifier les sections contenant un PE "Executable Windows".

```
root@kali# for i in $(ls ./malfind_dump/*.dmp); do echo $(file $i); done
process.0xffff9a0fd5218080.0x4670000.dmp: PE32 executable (DLL) (GUI) Intel 80386, for MS Windows
process.0xffff9a0fd5218080.0x680000.dmp: data
process.0xffff9a0fd5218080.0x850000.dmp: PE32 executable (DLL) (GUI) Intel 80386, for MS Windows
process.0xffff9a0fd5218080.0x880000.dmp: PE32 executable (DLL) (GUI) Intel 80386, for MS Windows
process.0xffff9a0fd5218080.0x9c0000.dmp: PE32 executable (DLL) (GUI) Intel 80386, for MS Windows
```

Ensuite, nous pouvons les uploader sur la plateforme "Virustotal" afin d'obtenir une analyse antivirale.

{{ :forensic:volatility_malfind_virustotal.png?nolink |}}



##### 1.3.2 Malprocfind

Le plugin malprocfind est dédié à l'analyse des processus système windows. Il va parcourir la mémoire à la recherche d'anomalies au sein des processus smss, csrss, winlogon, etc.. Ces anomalies peuvent être liées à un mauvais processus parent, un nombre d'occurence ou le path d'un processus anormal, etc..

L'option "-x" permet de prendre en compte dans l'analyse les processus dont l'exécution est terminée.


Ce plugin n'est pas intégré de base dans le dépot de volatility. 
Ce plugin n'étant pas présent de base dans le dépôt de volatility, il sera nécessaire de le récupérer.


```
root@kali# git clone https://github.com/csababarta/volatility_plugins.git
root@kali# volatility --plugins=./volatility_plugins/ -f ./JbossServer_memory.vmem malprocfind -x

Volatility Foundation Volatility Framework 2.6.1
Offset             ProcessName     PID   PPID  Name  Path  Priority  Cmdline User  Sess  Time  CMD   PHollow SPath
------------------ --------------- ----- ----- ----- ----- --------- ------- ----- ----- ----- ----- ------- -----
0xffff9a0fd4e5a640 csrss.exe        4608 True  True  True  True      True    True  True  False True  True    True 
0xffff9a0fd32ac040 system              4 True  True  True  True      True    True  None  True  True  True    True 
0xffff9a0fd4fe4080 svchost.exe      1056 True  True  True  True      True    True  True  True  True  True    True 
0xffff9a0fd5410080 cmd.exe          5672 False True  True  True      False   False True  True  True  True    True 
0xffff9a0fd4cf3080 conhost.exe      5680 False True  True  True      False   True  True  True  False True    True 
0xffff9a0fd4dfc080 smss.exe          572 True  True  None  False     None    True  False True  True  None    None 
..
..
Unusual process counts:
-----------------------
Warning! More than 1 smss.exe process! (3) (This might also be normal.)
Warning! More than 1 explorer.exe process! (2) (That usually means that multiple users are logged in.)
Warning! More than 1 winlogon.exe process! (2) (That usually means that multiple users are logged in.)

Processes without running parent process:
-----------------------------------------
PID 580 Offset: 0xffff9a0fd4e63080 Name: wininit.exe
PID 3820 Offset: 0xffff9a0fd5d92800 Name: ServerManager.
PID 1168 Offset: 0xffff9a0fd5473800 Name: MpCmdRun.exe
PID 3812 Offset: 0xffff9a0fd587c800 Name: jusched.exe
PID 472 Offset: 0xffff9a0fd43bd080 Name: csrss.exe
PID 4 Offset: 0xffff9a0fd32ac040 Name: System
```

Pour analyser les résultats affichés, nous allons décrire chacune des colonnes. \\
\\ \\
Le résultat de chacun des tests effectués peut avoir comme valeur : True / False / None. \\
**Considérons un résultat "False" à un test comme suspect.**

* PPID : Est-ce bien le processus parent légitime ?
* Name : Vérification que le nom du processus ne se rapproche pas d'un processus légitime "Typosquatting"
* Path : Vérification que le chemin du binaire soit bien celui attendu
* Priority : Vérification que la priority du processus soit la bonne
* Cmdline : Vérification que les arguments passés soit corrects
* User : Est-ce le bon utilisateur ayant exécuté le processus
* Sess : La session windows est-elle celle correspondant aux processus légitimes windows
* Time : 
* CMD : Test afin d'identifier si le processus a été exécuté à partir d'un invite de commande "cmd.exe"
* PHollow : mise en avant de binaire n'étant pas répertorié "unmapped process"
* SPath : Identification des binaires exécutés à partir de repertoire suspect "Temp, Recycle Bin, .."

#### 1.4 Analyse des DLLs/Modules chargées par les processus

La structure ```_PEB_LDR_DATA``` évoquée précédemment contient les pointeurs vers les modules/Dlls chargés en mémoire pour l’exécution du processus. Ces pointeurs correspondent à des adresses au sein de la table ```_LDR_DATA_TABLE_ENTRY```.

* InLoadOrderModuleList : Liste des modules chargés dans l'ordre de chargement.
* InMemoryOrderModuleList : Liste des modules chargés dans leur ordre croissant d’ImageBase. 
* InInitializationOrderModuleList : Liste des modules chargés classés dans l'ordre d’initialisation. Cette liste est différente de la InLoadOrderModuleList parcequ’une DLL est initialisé uniquement lorsque ses imports sont complets. Dans certains cas il est nécessaire de charger et d’initialiser d’autres DLLs avant la nôtre. 

Source : https://www.ivanlef0u.tuxfamily.org/?p=365

{{ :forensic:eprocess_3.png?nolink |}}


La structure ```_LDR_DATA_TABLE_ENTRY``` contient toutes les informations
des modules chargés pour l’exécution d’un processus. Ces modules peuvent être soit des Drivers (Kernel Module), soit des Dlls (chargées dans le User Mode).

* DllBase : Adresse Mémoire de base de la DLL
* EntryPoint : Point d’entrée de la DLL.
* SizeOfImage : Taille de la DLL en mémoire 
* FullDllName : Chemin complet de la DLL
* TimeDateStamp : L’horodatage de compilation pour la DLL


##### 1.4.1 Dlllist 

Ce plugin va lister les différentes Dlls qui sont chargées par chacun des processus.
Il est ainsi possible d'identifier très rapidement une DLL chargée lors d'une intrusion sur un système d'information.

```
root@kali# volatility -f ../JbossServer_memory.vmem  --profile=Win2016x64_14393 --kdbg=0xf80378f0d500 --dtb=0x1ab000  dlllist 
Volatility Foundation Volatility Framework 2.6
************************************************************************
rundll32.exe pid:   5704
Command line : rundll32.exe  \\192.168.205.180\XzmKO\inject.dll,0


Base                             Size          LoadCount LoadTime                       Path
------------------ ------------------ ------------------ ------------------------------ ----
0x0000000000a00000            0x14000             0xffff 2020-01-16 13:25:03 UTC+0000   C:\Windows\SysWOW64\rundll32.exe
0x00007ffc38d20000           0x1d1000             0xffff 2020-01-16 13:25:03 UTC+0000   C:\Windows\SYSTEM32\ntdll.dll
0x0000000055ae0000            0x52000             0xffff 2020-01-16 13:25:03 UTC+0000   C:\Windows\System32\wow64.dll
0x0000000055b40000            0x77000                0x6 2020-01-16 13:25:03 UTC+0000   C:\Windows\System32\wow64win.dll
..
0x00000000738e0000             0x5000                0x6 2020-01-16 13:25:03 UTC+0000   \\192.168.205.180\XzmKO\inject.dll
```

##### 1.4.2 Modules 

Le plugin "modules" va parcourir la double liste chainée et afficher les données provenant de la structure ```LDR_DATA_TABLE_ENTRY``` (**PsLoadedModuleList**).

```
root@kali# volatility  -f ./JbossServer_memory.vmem --profile=Win2016x64_14393 --kdbg=0xf80378f0d500 --dtb=0x1ab000 modules     
Volatility Foundation Volatility Framework 2.6.1
Offset(V)          Name                 Base                             Size File
------------------ -------------------- ------------------ ------------------ ----
0xffff9a0fd32376c0 ntoskrnl.exe         0xfffff80378c1d000           0x820000 \SystemRoot\system32\ntoskrnl.exe
0xffff9a0fd3237540 hal.dll              0xfffff8037943d000            0x75000 \SystemRoot\system32\hal.dll
0xffff9a0fd32373d0 kdcom.dll            0xfffff80377c48000             0xb000 \SystemRoot\system32\kd.dll
0xffff9a0fd3237250 mcupdate.dll         0xfffff806a52e0000            0x8e000 \SystemRoot\system32\mcupdate_GenuineIntel.dll
0xffff9a0fd3236010 werkernel.sys        0xfffff806a5370000            0x10000 \SystemRoot\System32\drivers\werkernel.sys
0xffff9a0fd3236ea0 CLFS.SYS             0xfffff806a5380000            0x63000 \SystemRoot\System32\drivers\CLFS.SYS
0xffff9a0fd3236d40 tm.sys               0xfffff806a4a00000            0x25000 \SystemRoot\System32\drivers\tm.sys
```

Il est important de garder à l'esprit que si un processus ne fait pas partie des listes chainees "FLINK" et "BLINK", ses modules/Dlls n'apparaitront pas dans le résultat ci-dessus. 

##### 1.4.3 Modscan 


### Netscan - Lister les connexions réseaux


```
root@kali# volatility -f ../JbossServer_memory.vmem netscan

Offset(P)          Proto    Local Address                  Foreign Address      State            Pid      Owner          Created
0x9a0fd3350aa0     UDPv4    192.168.205.186:138            *:*                                   4        System         2020-01-16 13:22:04 UTC+0000
0x9a0fd336a010     UDPv4    0.0.0.0:0                      *:*                                   1056     svchost.exe    2020-01-16 14:01:48 UTC+0000
0x9a0fd336a010     UDPv6    :::0                           *:*                                   1056     svchost.exe    2020-01-16 14:01:48 UTC+0000
0x9a0fd34f2a60     TCPv4    0.0.0.0:1098                   0.0.0.0:0            LISTENING        4168     java.exe       2020-01-16 13:23:29 UTC+0000
0x9a0fd34f2a60     TCPv6    :::1098                        :::0                 LISTENING        4168     java.exe       2020-01-16 13:23:29 UTC+0000
0x9a0fd34fea10     TCPv4    0.0.0.0:49727                  0.0.0.0:0            LISTENING        720      lsass.exe      2020-01-16 13:22:14 UTC+0000
0x9a0fd34fea10     TCPv6    :::49727                       :::0                 LISTENING        720      lsass.exe      2020-01-16 13:22:14 UTC+0000
```



```
# volatility -f ../JbossServer_memory.vmem  netscan | egrep -v '\*:\*|127\.0\.0\.1|0\.0\.0\.0:0'

# volatility -f ../JbossServer_memory.vmem  netscan | egrep -v '(\*:\*|::1:|LISTENING)'

Offset(P)          Proto    Local Address                  Foreign Address      State            Pid      Owner          Created
0x9a0fd5432d00     TCPv4    192.168.205.186:49769          192.168.205.180:4444 CLOSED           3664     rundll32.exe   2020-01-16 13:25:15 UTC+0000
0x9a0fd5c98730     TCPv4    192.168.205.186:8080           192.168.205.180:35146 CLOSED           4168     java.exe       2020-01-16 13:25:03 UTC+0000
0x9a0fd5cd2010     TCPv4    192.168.205.186:49768          192.168.205.180:4444 CLOSED           5856     rundll32.exe   2020-01-16 13:25:09 UTC+0000
0x9a0fd5e86a40     TCPv4    192.168.205.186:8080           192.168.205.180:35132 CLOSED           4168     java.exe       2020-01-16 13:24:23 UTC+0000
```


### 2. Analyse de la timeline

#### 2.1 Génération de la timeline

Au même titre que la timeline générée à partir d'une image disque, il est possible d'obtenir un résultat similaire à partir d'un dump mémoire.
Les plugins "timeliner", "mftparser" et "shellbags" permettent d'enregistrer leur résultat dans des fichiers de type "bodyfile" qui pourront être traités par mactime (un outil de la suite de sleuthkit).

```
root@kali# volatility -f ../JbossServer_memory.vmem timeliner --output=body > Evidence1-timeliner.body
root@kali# volatility -f ../JbossServer_memory.vmem mftparser --output=body > Evidence1-mftparser.body
root@kali# volatility -f ../JbossServer_memory.vmem shellbags --output=body > Evidence1-shellbags.body
```

Les fichiers obtenus vont être concaténés puis traités pour obtenir une timeline au format CSV.

```
root@kali# cat Evidence1-timeliner.body >> Evidence1-bodyfile
root@kali# cat Evidence1-mftparser.body >> Evidence1-bodyfile
root@kali# cat Evidence1-shellbags.body >> Evidence1-bodyfile
root@kali# sort Evidence1-bodyfile | uniq > dedup-Evidence1-bodyfile

root@kali# mactime -z UTC -y -d -b dedup-Evidence1-bodyfile 2012-04-02..2012-04-07 > Evidence1-mactime-timeline.csv
```

La période de temps ici utilisée n'est qu'un exemple pour montrer la faisabilité d'en spécifier une.

La timeline peut également être traitée par log2timeline pour être ensuite envoyé dans la ELK.

```
root@kali# log2timeline.py -f filter_windows.txt --volumes all --partitions all --no_dependencies_check --data /opt/secubian/tools/dfir_disk/plaso/data volatility-timeliner.plaso Evidence1-timeliner.body

## Création de l'index
root@kali# curl -XPUT "http://127.0.0.1:9200/volatility-timeliner"
root@kali# psort.py -z UTC -o elastic --server 127.0.0.1 --port 9200 --raw_fields --index_name timeline-json --data /opt/secubian/tools/dfir_disk/plaso/data volatility-timeliner.plaso
```

#### 2.2 Extraction de fichiers

##### Filescan - Lister les fichiers

Si lors de l'analyse vous avez un doute sur un fichier ou binaire. Il est possible de parcourir la $MFT "Master File Table" afin d'obtenir son "physical offset" nécessaire pour son extraction future.

```
root@kali# volatility -f ../JbossServer_memory.vmem  filescan
```


##### Dumpfiles - Extraction de fichiers

Grâce au plugin dumpfiles de Volatility, il est très facile d'extraire un fichier suspect d'un prélévement mémoire. 
Comment fonctionne t'il?
Il va parcourir la "Process Handle Table" et l'arbre "Virtual Adress Descriptor/VAD" à la recherche d'objet de type fichier "File_Objects". Une fois ces objets identifiés, le plugin analysera les 3 données "ImageSectionObject", "DataSectionObject" et "SharedCachedMap" nécessaire à l'extraction.


```
root@kali# volatility -f ../JbossServer_memory.vmem  dumpfiles -n --dump-dir=./dumpfiles/
```

Une fois la commande terminée, les fichiers extraits seront disponibles dans le répertoire "./dumpfiles/".

Voici quelques options utiles : 

* **-n** : qui permet d'otbenir les fichiers extraits avec leur nom original
* **-i** : n'utilise pas la casse pour effectuer la recherche
* **-r** : permet d'utiliser une regex afin d'extraire par exemple des fichiers ayant la même extension

Avec cette dernière option, il devient possible d'extraire des fichiers dont le nom correspond à une expression régulière.

```
root@kali# volatility -f ../JbossServer_memory.vmem  dumpfiles -n -i -r \\.exe --dump-dir=./dumpfiles/
```

Le nom des fichiers extraits seront sous la forme ```file.[PID].[OFFSET].ext```.




